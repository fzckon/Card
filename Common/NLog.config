<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Off" internalLogFile="c:\logs\nlog\nlog-internal.log">

  <!-- optional, add some variables
  https://github.com/nlog/NLog/wiki/Configuration-file#variables
  -->
  <!--layouts
${activityid}	将其置入日志System.Diagnostics trace 
${all-event-properties}	事件日志上下文
${appdomain}	当前应用程序域
${assembly-version}	应用程序
${basedir}	应用程序域的基本目录。
${callsite}	(类名称、方法名称和相关信息的源信息)。
${callsite-linenumber}	调用类的
${counter}	数值
${date}	当前日期和时间。
${document-uri}	用于Silverlight应用。
${environment}	环境变量
${event-properties}	 
${exception}	exception信息
${file-contents}	显示指定文件的内容
${gc}	垃圾收集器
${gdc}	诊断上下文
${guid}	GUID
${identity}	线程标识信息
${install-context}	安装参数
${level}	级别。
${literal}	 
${log4jxmlevent}	XML事件描述
${logger}	记录器的名字
${longdate}	日期和时间的格式分类yyyy-MM-dd HH:mm:ss.ffff。
${machinename}	名称
${mdc} 	映射诊断
${mdlc}	异步映射诊断上下文
${message}	消息
${ndc}	线程结构
${ndlc}	异步线程
${newline}	文字换行
${nlogdir}	nlog.dll目录。
${performancecounter}	述性能计数器。
${processid}	当前进程标识符
${processinfo}	运行信息
${processname}	当前进程的名称。
${processtime}	该时间过程中格式HH:MM:ss.mmm。
${qpc}	高精度定时器，基于返回的值从queryperformancecounter(任选地)转换为秒。
${registry}	从注册表中的值。
${sequenceid}	ID
${shortdate}	短时间 格式YYYY-MM-DD。
${sl-appinfo}	Silverlight应用。
${specialfolder}	文件夹路径
${stacktrace} -	堆栈跟踪渲染器。
${tempdir}	临时目录中。
${threadid}	当前线程的标识符。
${threadname}	当前线程。
${ticks}	当前日期和时间。
${time}	24小时格式HH:MM:ss.mmm。
${var}	{$var}-提供新的变量(4.1)
${windows-identity}	indows线程标识信息(用户名)
  -->
  <variable name="myvar" value="myvalue"/>
  <variable name="project" value="WebApplication1"/>
  <!--<variable name="localdir" value="${basedir}/logs/${shortdate}.log"/>-->
  <!--<variable name="localdir" value="../../../logs/${shortdate}.log"/>-->
  <variable name="localdir" value="c:/logs/${project}/"/>

  <variable name="nlogdetail" value="
            date:${date}${newline}
            level:${level}${newline}
            logger:${logger}${newline}
            machinename:${machinename}${newline}
            message:${message}${newline}
            appdomain:${appdomain}${newline}
            assembly-version:${assembly-version}${newline}
            basedir:${basedir}${newline}
            callsite:${callsite}${newline}
            callsite-linenumber:${callsite-linenumber}${newline}
            counter:${counter}${newline}
            nlogdir:${nlogdir}${newline}
            processid:${processid}${newline}
            processname:${processname}${newline}
            specialfolder:${specialfolder}${newline}
            stacktrace: ${stacktrace}${newline}
            ---------------------------------------------------------------------------------------------
            ${newline}" />

  <!--
  See https://github.com/nlog/nlog/wiki/Configuration-file
  for information on customizing logging rules and outputs.
   -->
  <targets>
    <!--
    add your targets here
    See https://github.com/nlog/NLog/wiki/Targets for possible targets.
    See https://github.com/nlog/NLog/wiki/Layout-Renderers for the possible layout renderers.
    <target xsi:type="File"
          name="String"
          layout="Layout"
          header="Layout"
          footer="Layout"
          encoding="Encoding"
          lineEnding="Enum"
          archiveAboveSize="Long"
          maxArchiveFiles="Integer"
          archiveFileName="Layout"
          archiveNumbering="Enum"
          archiveDateFormat="String"
          archiveEvery="Enum"          
          archiveOldFileOnStartup="Boolean"
          replaceFileContentsOnEachWrite="Boolean"
          fileAttributes="Enum"
          fileName="Layout"
          deleteOldFileOnStartup="Boolean"
          enableFileDelete="Boolean"
          createDirs="Boolean"
          concurrentWrites="Boolean"
          openFileFlushTimeout="Integer"
          openFileCacheTimeout="Integer"
          openFileCacheSize="Integer"
          networkWrites="Boolean"
          concurrentWriteAttemptDelay="Integer"
          concurrentWriteAttempts="Integer"
          bufferSize="Integer"
          autoFlush="Boolean"
          keepFileOpen="Boolean"
          forceManaged="Boolean"
          enableArchiveFileCompression="Boolean"
          cleanupFileName="Boolean"
          writeFooterOnArchivingOnly="Boolean"
          writeBom="Boolean" />
    -->

    <!--
    Write events to a file with the date in the filename.
    <target xsi:type="File" name="f" fileName="${basedir}/logs/${shortdate}.log"
            layout="${longdate} ${uppercase:${level}} ${message}" />
    -->
    <target name="console">
      <target xsi:type="Console" layout="${longdate} ${uppercase:${level}} ${message}" encoding="utf-8"/>
    </target>

    <target name="file">
      <target xsi:type="File" fileName="${localdir}${level}/${shortdate}.log" layout="${longdate} ${uppercase:${level}} ${message}" encoding="utf-8"/>
    </target>

    <target name="file_detail">
      <target xsi:type="File" fileName="${localdir}${level}/${shortdate}_detail.log" layout="${logdetail}" encoding="utf-8" />
    </target>
    <target name="file_archive">
      <!--滚动日志文件-->
      <target xsi:type="File"
              fileName="${localdir}${level}/${shortdate}_archive.log"
              layout="${logdetail}"
              encoding="utf-8"
              archiveFileName="${localdir}${level}/Archives/${shortdate}_archive.{#####}.log"
              archiveAboveSize="102400"
              maxArchiveFiles="10"
              archiveEvery="Day"
              keepFileOpen="false"
              ConcurrentWrites="false"
              archiveNumbering="Rolling"
      />
    </target>
    <target name="file_async" xsi:type="AsyncWrapper" queueLimit="5000" overflowAction="Discard">
      <!--异步文件-->
      <target xsi:type="File"
              fileName="${localdir}${level}/${shortdate}_async.log"
              layout="${logdetail}"
              encoding="utf-8"
              keepFileOpen="true"
              openFileCacheTimeout="30"
      />
    </target>

    <target name="file_csv">
      <target xsi:type="File" fileName="${localdir}${level}/${shortdate}.csv">
        <layout xsi:type="CSVLayout">
          <column name="time" layout="${longdate}" />
          <column name="message" layout="${message}" />
          <column name="logger" layout="${logger}"/>
          <column name="level" layout="${level}"/>
        </layout>
      </target>
    </target>

    <target name="debugger_vs">
      <target xsi:type="Debugger" layout="NLog: ${date:format=HH\:mm\:ss} | ${level:uppercase=true:padding=-5} | ${message}" encoding="utf-8" />
    </target>

    <target name="mail">
      <!--邮件-->
      <target xsi:type="Mail"
            smtpServer="你的邮件服务器"
            smtpPort="你的邮件服务器端口"
            smtpAuthentication="Basic"
            smtpUserName="你的邮件服务器名"
            smtpPassword="你的邮件服务器密码"
            enableSsl="false"
            addNewLines="false"
            from="你的发件邮箱"
            to="你的收件邮箱"
            subject="subject:${machinename}报错"
            header="---------------------开头-------------------------"
            body="${newline}${message}${newline}"
            footer="---------------------结尾-------------------------"
            encoding="UTF-8"/>
    </target>

    <target name="db" xsi:type="AsyncWrapper" queueLimit="5000" overflowAction="Discard">
      <target type="Database" dbProvider="mssql" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=EFinance;Persist Security Info=True;User ID=sa;Password=123456;">

        <commandText>
          INSERT INTO Log(Timestamp,Level,Message,Action,Amount,StackTrace) VALUES(@time_stamp, @level, @message, @action, @amount, @stacktrace);
        </commandText>

        <!-- database connection parameters -->
        <parameter name="@time_stamp" layout="${date}" />
        <parameter name="@level" layout="${level:uppercase=true}" />
        <parameter name="@message" layout="${message}" />
        <parameter name="@action" layout="${event-context:item=Action}" />
        <parameter name="@amount" layout="${event-context:item=Amount}" />
        <parameter name="@stacktrace" layout="${stacktrace}" />
      </target>
    </target>
  </targets>

  <rules>
    <!-- add your logging rules here -->

    <!--
    Write all events with minimal level of Debug (So Debug, Info, Warn, Error and Fatal, but not Trace)  to "f"
    <logger name="*" minlevel="Debug" writeTo="f" />
    -->
    <logger name="TraceDebug" minlevel="Trace" writeTo="file" />
    <logger name="Debug" minlevel="Debug" writeTo="debugger_vs" />
    <logger name="DB" minlevel="Info" writeTo="db" />
  </rules>
</nlog>
